; Copyright 2024 Jean-Baptiste M. "JBQ" "Djaybee" Queru
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; As an added restriction, if you make the program available for
; third parties to use on hardware you own, such as public gaming
; cabinets (whether or not in a gaming arcade, whether or not
; coin-operated or otherwise for a fee,) the conditions of
; section 13 will apply even if no network is involved.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU Affero General Public License for more details.
;
; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
;
; SPDX-License-Identifier: AGPL-3.0-or-later

; Coding style:
;	- ASCII
;	- hard tabs, 8 characters wide, except in ASCII art
;	- 120 columns overall
;	- Standalone block comments in the first 80 columns
;	- Code-related block comments allowed in the last 80 columns
;	- Global symbols for code are CamelCase
;	- Symbols for variables are snake_case
;	- Symbols for hardware registers are ALL_CAPS
;	- Related symbols start with the same prefix (so they sort together)
;	- Include but comment out instructions that help readability but
;		don't do anything (e.g. redundant CLC when the carry is
;		guaranteed already to be clear). The comment symbol should be
;		where the instruction would be, i.e. not on the first column.
;		There should be an explanation in a comment.
;	- Note: rulers at 40, 80 and 120 columns help source width

; #############################################################################
; #############################################################################
; #############################################################################
; ########                                                             ########
; ########                                                             ########
; ########                           STAR 40                           ########
; ########                                                             ########
; ########          CELEBRATING 40 YEARS OF CODING EXPERIENCE          ########
; ########                                                             ########
; ########             A DEMO FOR AMSTRAD CPC 464 TO 6128              ########
; ########                                                             ########
; ########                                                             ########
; #############################################################################
; #############################################################################
; #############################################################################

; *******************
; *                 *
; * High-level view *
; *                 *
; *******************

; A goal is to create some displays inspired by the Atari 2600 game "Solaris"
;
; Naturally, replicating all the colors is only feasible with some mid-frame
; palette changes, actually per-line palette changes, which can only be
; done by racing the beam for the whole frame.
;
; In turn, since that's costly, the frame should be set up such that there's
; no need to race the beam outside of the frame.

; The best time to start racing is on the interrupt that occurs on line
; 54 after CRTC VSync, such that any graphics that require to race the beam
; should start right after that. However, the top line of the screen contains
; a score in a single color, and doesn't need to race the beam, so that it can
; start a little bit earlier, on line 48, where the beam-racing starts on line
; 56. This turns out to be a perfect match for a 256*256 screen, which has
; plenty of advantages for address computations.
;
; Also, since we're racing the beam and changing the palette, there's no need
; to use mode 0 to have lots of colors on-screen, mode 1 is fine for that,
; it matches the 4 simultaneous colors of the 2600.

; **************************
; *                        *
; * Palette considerations *
; *                        *
; **************************

; Color 0 is used for the background, since that's an easy bit to insert
; on either side of a register when shifting (ADD, SLA, SRL)
;
; In turn, color 3 is used for the player sprite: color 3 can be drawn
; pixel-exact with a plain OR, so it's appropriate for the topmost graphics.
;
; Because of the constraints of palette changes, planets have to be using
; color 2, so that alternating between 2 and 3 is fast (INC/DEC).
;
; That leaves color 1 for the starfield.

; ******************
; *                *
; * Planet drawing *
; *                *
; ******************

; Planets are drawn with (hand-)generated code. Positioning granularity is
; cut in half in both X and Y: in X, to reduce the number of code slices
; to generate; in Y, both to reduce the number of code slices to generate
; and to align with palette changes every other line.
;
; A full-size planet is 26x24 pixels, which is approximately round on a
; PAL display (CPC PAL mode 1 pixels are tall by 32/29, which is the ratio
; between the 16 MHz CPC master clock and the 14.5 MHz clock of square
; pixels in interlaced PAL). 26 pixels is guaranteed to take at most
; 7 bytes to draw (because of the 2-pixel horizontal positioning).


	.z80
	.org	$4000

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                       CPC Hardware Definitions                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

_PPI_PORT_A_L	.equ	$F4		; pppppppp
					; ||||||||
					; ++++++++-- PSG data
_PPI_PORT_A_H	.equ	(_PPI_PORT_A_L << 8)

_PPI_PORT_B_L	.equ	$F5		; cpxrbbbv
					; ||||||||
					; |||||||+-- CRTC VSync
					; ||||+++--- Brand
					; ||||		0 = Isp (unused)
					; ||||		1 = Triumph (unused)
					; ||||		2 = Saisho (unused)
					; ||||		2 = Solavox (unused)
					; ||||		4 = Awa
					; ||||		5 = Schneider
					; ||||		6 = Orion
					; ||||		7 = Amstrad
					; |||+------ Region. 1 = PAL, 0 = NTSC
					; ||+------- Expansion port /EXP pin
					; |+-------- Printer ready. 0 = Ready
					; +--------- Cassette data in
_PPI_PORT_B_H	.equ	(_PPI_PORT_B_L << 8)

_PPI_PORT_C_L	.equ	$F6		; ppcmkkkk
					; ||||||||
					; ||||++++-- Keyboard row to scan
					; |||+------ Cassette motor. 1 = On
					; ||+------- Cassette data out
					; ++-------- PSG mode
					;		00 = inactive
					;		01 = read
					;		10 = write
					;		11 = control
_PPI_PORT_C_H	.equ	(_PPI_PORT_C_L << 8)

_PPI_CONTROL_L	.equ	$F7		; 0...bbbv
					;     ||||
					;     |||+-- Bit value to be written
					;     +++--- Bit selection in port C

					; 1xxaumbc
					;  |||||||
					;  ||||||+-- Port CL direction. 1 = In
					;  |||||+--- Port B direction. 1 = In
					;  ||||+---- Ports B+CL Mode
					;  |||+----- Port CU direction. 1 = In
					;  ||+------ Port A direction. 1 = In
					;  ++------- Ports A+CU Mode
_PPI_CONTROL_H	.equ	(_PPI_CONTROL_L << 8)

; TODO!!!

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                        Hardware Initialization                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

InitHW:
; *** First, disable interrupts, so that the firmware is out of the way ***
	DI

; *** Set the CPU to Interrupt Mode 1 ***
	IM	1

; *** Move stack to its proper address ***
	LD	SP,$C000

; *** Wait for the VSYNC bit to be asserted, to avoid tearing ***
	LD	B,_PPI_PORT_B_L
InitWaitVBL:
	IN	A,(C)
	RRCA
	JR	NC,InitWaitVBL

; *** Disable ROMs, switch to mode 1 ***
	LD	BC,$7F00 + 10001101b
	OUT	(C),C

; *** Disable 6128 extended RAM ***
	LD	C,11000000b
	OUT	(C),C

; *** Black palette ***
	LD	DE,(00000000b << 8) + 01000000b + $14
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	LD	D,00010000b
	OUT	(C),D
	OUT	(C),E

; *** Program CRTC, 288x224 ***
	LD	BC,($BC << 8) + 0
	OUT	(C),C
	LD	BC,($BD << 8) + 63	; 64 characters per line, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 1
	OUT	(C),C
	LD	BC,($BD << 8) + 32	; 32 visible chars per line, default 40
	OUT	(C),C
	LD	BC,($BC << 8) + 2
	OUT	(C),C
	LD	BC,($BD << 8) + 42	; 42 hsync start, default 46
	OUT	(C),C
	LD	BC,($BC << 8) + 3
	OUT	(C),C
	LD	BC,($BD << 8) + $8E	; 8/14 sync durations, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 4
	OUT	(C),C
	LD	BC,($BD << 8) + 38	; 39 lines per screen, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 5
	OUT	(C),C
	LD	BC,($BD << 8) + 0	; 0 extra pixel lines, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 6
	OUT	(C),C
	LD	BC,($BD << 8) + 32	; 32 visible lines per scrn, default 25
	OUT	(C),C
	LD	BC,($BC << 8) + 7
	OUT	(C),C
	LD	BC,($BD << 8) + 33	; 33 vsync start, default 30
	OUT	(C),C
	LD	BC,($BC << 8) + 8
	OUT	(C),C
	LD	BC,($BD << 8) + 00b	; no interlace, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 9
	OUT	(C),C
	LD	BC,($BD << 8) + 7	; 8 lines per character, do not touch
	OUT	(C),C
	LD	BC,($BC << 8) + 12
	OUT	(C),C
	LD	BC,($BD << 8) + $30	; screen starts at address $C000
	OUT	(C),C
	LD	BC,($BC << 8) + 13
	OUT	(C),C
	LD	BC,($BD << 8) + $00	; screen starts at address $C000
	OUT	(C),C


; *** Set 8255 to default mode (registers A and B as output mode 0) ***
	LD	BC,_PPI_CONTROL_H + 10000010b

; *** Basic AY-3-8912 setup - mixer off ***
	LD	BC,($F4 << 8) + 7
	OUT	(C),C
	LD	BC,$F6C0
	OUT	(C),C
	LD	BC,$F600
	OUT	(C),C
	LD	BC,($F4 << 8) + 0
	OUT	(C),C
	LD	BC,$F680
	OUT	(C),C
	LD	BC,$F600
	OUT	(C),C

; *** Turn floppy motors off ***
	LD	BC,$FA7E
	XOR	A
	OUT	(C),A

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                        Software Initialization                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; *** Install interrupt handler, and enable interrupts ***

	LD	HL,$C9FB	; FB = EI, C9 = RET, little-endian
	LD	($38),HL	; $38 = address of IM 1 interrupt handler
	EI

; *** Set basic colors ***
	LD	B,$7F
	LD	DE,$014A	; 1 = Starfield, bright yellow
	OUT	(C),D
	OUT	(C),E
	LD	DE,$0257	; 2 = Planets, sky blue
	OUT	(C),D
	OUT	(C),E
	LD	DE,$034F	; 3 = Player, paster magenta
	OUT	(C),D
	OUT	(C),E

	LD	A,$FF
	LD	($F83F),A

; *** Wait to be outside of VSync, to avoid off-center starts ***
	LD	B,_PPI_PORT_B_L
NoVBL:
	IN	A,(C)
	RRCA
	JR	C,NoVBL

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Main Loop                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

MainLoop:

; *** Wait for VSync ***
	LD	B,_PPI_PORT_B_L
WaitVBL:
	IN	A,(C)
	RRCA
	JR	NC,WaitVBL

	LD	HL,stars_x
	LD	A,(HL)
	INC	A
	INC	A
	LD	(HL),A

	INC	HL

	LD	A,(HL)
	INC	A
	CP	216
	JR	C,InRange
	SUB	216
InRange:
	LD	(HL),A

	LD	A,(stars_x)
	LD	C,A
	AND	3
	LD	B,A
	LD	D,$80
	JR	Bits
Shift:
	SRL	D
Bits:
	DEC	B
	JP	P,Shift

	SRL	C
	SRL	C
	LD	A,64
	ADD	C
	LD	E,A

	LD	A,(stars_y)
	LD	B,A
	AND	7
	ADD	A
	ADD	A
	ADD	A
	ADD	$C0
	LD	H,A
	LD	L,0

	LD	A,26
	SRL	B
	SRL	B
	SRL	B
	SUB	B
	LD	C,A
	LD	B,0
	LD	IX,StarX
	ADD	IX,BC

	LD	B,27
Star:
	LD	A,(IX)
	INC	IX
	ADD	E
	AND	$3F
	LD	C,A
	LD	A,L
	AND	$C0
	OR	C
	ADD	64
	LD	L,A
	LD	A,0
	ADC	H
	LD	H,A

	LD	(HL),D
	PUSH	HL
	DJNZ	Star


	LD	IX,$C100
	LD	A,$0F
	LD	BC,$070E
	LD	DE,$030C
	LD	HL,$0108


; - - - - - - - - - # # # #
; - - - - - - - # # # # # #
; - - - - - # # # # # # # #
; - - - - # # # # # # # # #
; - - - # # # # # # # # # #
; - - # # # # # # # # # # #
; - # # # # # # # # # # # #
; - # # # # # # # # # # # #
; - # # # # # # # # # # # #
; # # # # # # # # # # # # #
; # # # # # # # # # # # # #
; # # # # # # # # # # # # #


	LD	(IX-62),B	; 5
	LD	(IX-61),A
	LD	(IX-60),L

	LD	(IX),B
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),L

	LD	(IX+64),B
	LD	(IX+65),A
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),A
	LD	(IX+70),L

	LD	A,8		; 2
	ADD	IXH		; 2
	LD	IXH,A		; 2
	LD	A,$0F		; 2

	LD	(IX-63),H
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),C

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+64),B
	LD	(IX+65),A
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),A
	LD	(IX+70),L

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-63),B
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),L

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+64),D
	LD	(IX+65),A
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),A

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-63),A
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),E

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+64),H
	LD	(IX+65),A
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),C

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-64),H
	LD	(IX-63),A
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),C

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+65),A
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),E

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-64),D
	LD	(IX-63),A
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),A

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+65),B
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),A
	LD	(IX+69),L

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-64),B
	LD	(IX-63),A
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),A
	LD	(IX-58),L

	LD	(IX),A
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),E

	LD	(IX+65),H
	LD	(IX+66),A
	LD	(IX+67),A
	LD	(IX+68),C

	LD	A,8
	ADD	IXH
	LD	IXH,A
	LD	A,$0F

	LD	(IX-64),B
	LD	(IX-63),A
	LD	(IX-62),A
	LD	(IX-61),A
	LD	(IX-60),A
	LD	(IX-59),A
	LD	(IX-58),L

	LD	(IX),B
	LD	(IX+1),A
	LD	(IX+2),A
	LD	(IX+3),A
	LD	(IX+4),A
	LD	(IX+5),A
	LD	(IX+6),L

	LD	(IX+66),B
	LD	(IX+67),A
	LD	(IX+68),L



	LD	IX,$C460

	LD	C,$FF

	LD	(IX-64),C
	LD	(IX+0),C
	LD	(IX+1),C
	LD	(IX+64),C

	LD	B,7
DrawPlayer:
	LD	A,8
	ADD	IXH
	LD	IXH,A

	LD	(IX-64),C
	LD	(IX+0),C
	LD	(IX+1),C
	LD	(IX+64),C

	DJNZ	DrawPlayer

	LD	BC,$7F02
	LD	DE,ColorsPlayer
	LD	HL,ColorsPlanet
	EXX

	LD	BC,$7F10
	OUT	(C),C
	LD	DE,$4B54
	LD	C,15
	OUT	(C),D
Nop64:
	DEC	C
	JR	NZ,Nop64
	NOP
	OUT	(C),E

	EXX
	OUT	(C),C
	EXX
	LD	A,$40

;-------------------------------;
; Start line 54 (score line 6)	;
				;
	HALT			; +35/35	That's the overall timing from hsync to the interrupt returning
				;
	DI			; +1/36		Disable interrupts - we're now racing the beam
				;
	LD	B,6		; +2/38		\ Waste time...
Line54:				;		|
	DJNZ	Line54		; +23/61	| ... with a loop for space ...
				;		|
	NOP			; +1/62		|
	NOP			; +1/63		| ... and explicit nops for readability
	NOP			; +1/64		/
; End line 54 (score line 6)	;
;-------------------------------;

;-------------------------------;
; Start line 55 (score line 7)	;
				;
	LD	B,15		; +2/2		\ Waste time, loop + nop
Line55:				;		|
	DJNZ	Line55		; +59/61	|
	NOP			; +1/62		/
				;
	LD	D,27		; +2/64		Prepare loop counter for rendering core
				;
; End line 55 (score line 7)	;
;-------------------------------;

Kernel:
;-------------------------------;
; Start 8-line block		;
				;

	EXX			; +1/1		Swap registers for palette
	INC	B		; +1/2		Prepare B for OUTI
	OUTI			; +5/7		Output color 2: planet
	EX	DE,HL		; +1/8		Swap DE=planet, HL=player
	INC	C		; +1/9		C is now 3 (player color)
	OUT	(C),C		; +4/13		Switch Gate Array to color 3
	INC	B		; +1/14		Prepare B for OUTI
	OUTI			; +5/19		Output color 3: player
	EXX			; +1/20		Swap registers for drawing

	LD	E,26		; +2/22
Line2:
	DEC	E		; \ +103/125 (26*4-1)
	JR	NZ,Line2	; /
	NOP			; +1/126
	NOP			; +1/127
	NOP			; +1/128

	EXX			; +1/1		Swap registers for palette
	INC	B		; +1/2		Prepare B for OUTI
	OUTI			; +5/7		Output color 3: player
	EX	DE,HL		; +1/8		Swap DE=player, HL=planet
	DEC	C		; +1/9		C is now 2 (planet color)
	OUT	(C),C		; +4/13		Switch Gate Array to color 2
	INC	B		; +1/14		Prepare B for OUTI
	OUTI			; +5/19		Output color 2: planet
	EXX			; +1/20		Swap registers for drawing

	LD	E,26		; +2/22
Line4:
	DEC	E		; \ +103/125 (26*4-1)
	JR	NZ,Line4	; /
	NOP			; +1/126
	NOP			; +1/127
	NOP			; +1/128

	EXX			; +1/1		Swap registers for palette
	INC	B		; +1/2		Prepare B for OUTI
	OUTI			; +5/7		Output color 2: planet
	EX	DE,HL		; +1/8		Swap DE=planet, HL=player
	INC	C		; +1/9		C is now 3 (player color)
	OUT	(C),C		; +4/13		Switch Gate Array to color 3
	INC	B		; +1/14		Prepare B for OUTI
	OUTI			; +5/19		Output color 3: player
	EXX			; +1/20		Swap registers for drawing

	LD	E,26		; +2/22
Line6:
	DEC	E		; \ +103/125 (26*4-1)
	JR	NZ,Line6	; /
	NOP			; +1/126
	NOP			; +1/127
	NOP			; +1/128

	EXX			; +1/1		Swap registers for palette
	INC	B		; +1/2		Prepare B for OUTI
	OUTI			; +5/7		Output color 3: player
	EX	DE,HL		; +1/8		Swap DE=player, HL=planet
	DEC	C		; +1/9		C is now 2 (planet color)
	OUT	(C),C		; +4/13		Switch Gate Array to color 2
	INC	B		; +1/14		Prepare B for OUTI
	OUTI			; +5/19		Output color 2: planet

	DEC	C		; +1/20		C is now 1 (star color)
	OUT	(C),C		; +4/24		Switch Gate Array to color 1

	OUT	(C),A		; +4/28		Output color 1: stars
	INC	A		; +1/29		\
	AND	$1F		; +2/31		| Increment bottom 5 bits
	OR	$40		; +2/33		/

	INC	C		; +1/34		C is now 2 (planet color)
	OUT	(C),C		; +4/38		Switch Gate Array to color 2
	EXX			; +1/39

	LD	E,21		; +2/41
Line8:
	DEC	E		; \ +83/124 (21*4-1)
	JR	NZ,Line8	; /

	DEC	D		; +1/125	\ Loop over rendering lines
	JR	NZ,Kernel	; +3/128 (taken)/
; End 8-line block		;
;-------------------------------;

	EI
	LD	B,27
	XOR	A
EraseStar:
	POP	HL
	LD	(HL),A
	DJNZ	EraseStar

	JP	MainLoop

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                                 Data                                  ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

StarX:
	defb	54,12,4,13,48,59,34,56,2,28,8,35,36,57,6,35,28,33,46,7,43,26,14,23,47,54,5
	defb	54,12,4,13,48,59,34,56,2,28,8,35,36,57,6,35,28,33,46,7,43,26,14,23,47,54

ColorsPlanet:
	rept	27
	defb	$57,$5F,$5B,$5F
	endm

ColorsPlayer:
	rept	27
	defb	$5C,$4C,$47,$4C
	endm

EndCode:

stars_x		.equ	EndCode
stars_y		.equ	stars_x + 1

EndVars		.equ	stars_y + 1
