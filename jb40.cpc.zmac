; Copyright 2024 Jean-Baptiste M. "JBQ" "Djaybee" Queru
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; As an added restriction, if you make the program available for
; third parties to use on hardware you own, such as public gaming
; cabinets (whether or not in a gaming arcade, whether or not
; coin-operated or otherwise for a fee,) the conditions of
; section 13 will apply even if no network is involved.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU Affero General Public License for more details.
;
; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
;
; SPDX-License-Identifier: AGPL-3.0-or-later

; Coding style:
;	- ASCII
;	- hard tabs, 8 characters wide, except in ASCII art
;	- 120 columns overall
;	- Standalone block comments in the first 80 columns
;	- Code-related block comments allowed in the last 80 columns
;	- Global symbols for code are CamelCase
;	- Symbols for variables are snake_case
;	- Symbols for hardware registers are ALL_CAPS
;	- Related symbols start with the same prefix (so they sort together)
;	- Include but comment out instructions that help readability but
;		don't do anything (e.g. redundant CLC when the carry is
;		guaranteed already to be clear). The comment symbol should be
;		where the instruction would be, i.e. not on the first column.
;		There should be an explanation in a comment.
;	- Note: rulers at 40, 80 and 120 columns help source width

; #############################################################################
; #############################################################################
; #############################################################################
; ########                                                             ########
; ########                                                             ########
; ########                        DJAYBEE AT 40                        ########
; ########                                                             ########
; ########          CELEBRATING 40 YEARS OF CODING EXPERIENCE          ########
; ########                                                             ########
; ########             A DEMO FOR AMSTRAD CPC 464 TO 6128              ########
; ########                                                             ########
; ########                                                             ########
; #############################################################################
; #############################################################################
; #############################################################################

; At the technical level, the following high-level points are noteworthy:
;
; The display is based around 51x20 CRTC cells, i.e. 408*160, which almost
; fills the horizontal overscan, chosen because it fits in 16kB of framebuffer
; and approximately matches the aspect ration of widescreen movies.
;
; It uses hardware scrolling, with page-flipping between pages that are off
; by half a cell.
;
; It races the beam during the active display, changing one of the colors so
; that sprites can each use a different color, giving the illusion of more
; than 4 simultaneous colors.
;
; It interferes with interrupt timing so that it only needs to race the beam
; during the active part or the display.

	.z80
	.org	$4000

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                       CPC Hardware Definitions                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; TODO!!!

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                        Hardware Initialization                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

Init:
; *** First, disable interrupts, so that the firmware is out of the way ***
	DI

; *** Get stack set up in lower 48kB ***
	LD	SP,$C000

; *** Disable ROMs, switch to mode 1 ***
	LD	BC,$7F00 + 10001101b
	OUT	(C),C

; *** Disable 6128 extended RAM ***
	LD	C,11000000b
	OUT	(C),C

; *** Black palette ***
	LD	DE,(00000000b << 8) + 01000000b + $14
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	INC	D
	OUT	(C),D
	OUT	(C),E
	LD	D,00010000b
	OUT	(C),D
	OUT	(C),E

; *** Program CRTC 384 x 160 (cinemascope) ***
	LD	BC,($BC << 8) + 0
	OUT	(C),C
	LD	BC,($BD << 8) + 63
	OUT	(C),C
	LD	BC,($BC << 8) + 1
	OUT	(C),C
	LD	BC,($BD << 8) + 51
	OUT	(C),C
	LD	BC,($BC << 8) + 2
	OUT	(C),C
	LD	BC,($BD << 8) + 51	; use 51 or 52
	OUT	(C),C
	LD	BC,($BC << 8) + 3
	OUT	(C),C
	LD	BC,($BD << 8) + $8B
	OUT	(C),C
	LD	BC,($BC << 8) + 4
	OUT	(C),C
	LD	BC,($BD << 8) + 38
	OUT	(C),C
	LD	BC,($BC << 8) + 5
	OUT	(C),C
	LD	BC,($BD << 8) + 0
	OUT	(C),C
	LD	BC,($BC << 8) + 6
	OUT	(C),C
	LD	BC,($BD << 8) + 20
	OUT	(C),C
	LD	BC,($BC << 8) + 7
	OUT	(C),C
	LD	BC,($BD << 8) + 28
	OUT	(C),C
	LD	BC,($BC << 8) + 8
	OUT	(C),C
	LD	BC,($BD << 8) + 00b
	OUT	(C),C
	LD	BC,($BC << 8) + 9
	OUT	(C),C
	LD	BC,($BD << 8) + 7
	OUT	(C),C
	LD	BC,($BC << 8) + 12
	OUT	(C),C
	LD	BC,($BD << 8) + $30
	OUT	(C),C
	LD	BC,($BC << 8) + 13
	OUT	(C),C
	LD	BC,($BD << 8) + $00
	OUT	(C),C


; *** Set 8255 to default mode (register A as write) ***
	LD	BC,($F7 << 8) + 10000010b

; *** Basic AY-3-8912 setup - mixer off ***
	LD	BC,($F4 << 8) + 7
	OUT	(C),C
	LD	BC,$F6C0
	OUT	(C),C
	LD	BC,$F600
	OUT	(C),C
	LD	BC,($F4 << 8) + 0
	OUT	(C),C
	LD	BC,$F680
	OUT	(C),C
	LD	BC,$F600
	OUT	(C),C

; *** Turn floppy motors off ***
	LD	BC,$FA7E
	XOR	A
	OUT	(C),A

; TODO: move code to execution location.

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                        Software Initialization                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; TODO: clear all RAM.

; *** Set our own interrupt routine ***
;	LD	A,$C3		; C3 = unconditional jump
;	LD	($38),A
;	LD	HL,Interrupt
;	LD	($39),HL

	LD	HL,$C9FB	; FB = EI, C9 = RET, little-endian
	LD	($38),HL

	IM	1

; *** Clear framebuffer ***
	LD	HL,$C000
	LD	A,L
ClearFBLoop:
	LD	(HL),A
	INC	HL
	CMP	H
	JR	NZ, ClearFBLoop

; *** Set up proper palette ***
	LD	BC,$7F01
	OUT	(C),C
	LD	C,$40
	OUT	(C),C
	LD	C,$02
	OUT	(C),C
	LD	C,$4B
	OUT	(C),C

; *** All done, enable interrupts ***
	EI

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Main Loop                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################


Loop:
; *** Wait for the VSYNC bit to be asserted ***
WaitVBL:
	LD	B,$F5
	IN	A,(C)
	RRCA
	JR	NC,WaitVBL

; *** Shift interrupts ***
	DI

	LD	HL,(0)
	INC	HL
	LD	A,00000011b
	AND	H
	OR	00110000b
	LD	H,A
	LD	(0),HL

	LD	BC,($BC << 8) + 12
	OUT	(C),C
	INC	B
	OUT	(C),H
	LD	BC,($BC << 8) + 13
	OUT	(C),C
	INC	B
	OUT	(C),L


; Wait between 35 and 53 lines, and enable interrupts
	LD	B,224		; 35 lines is 2240 NOPs
				; run a 10-NOP loop 224 times
Skip35:
	ADD	HL,HL		; 3
	ADD	HL,HL		; 3
	DJNZ	Skip35		; 4

	EI
	NOP			; Delay to avoid EI/HALT pair

; -------------------------------
; Start line 86 (Border 78)	;
;				;
; Sync up with the display and will remain in sync all the way
				;
	HALT			; +16/16 (HSync + request + EI/RET)
				;
	LD	B,11		; +2/18
L86Wait:			;
	DJNZ	L86Wait		;	10*4+3=43
				; +43/61 loop
	ADD	HL,HL		; +3/64 (filler)
				;
; End line 86 (Border 78)	;
; -------------------------------

; -------------------------------
; Start line 87 (Border 79)	;
				;
	LD	B,13		; +2/2
L87Wait:			;
	DJNZ	L87Wait		;	12*4+3=51
				; +51/53 loop
	INC	BC		; +2/55 (filler)
				;
	LD	BC,$7F10	; +3/58
	OUT	(C),C		; +4/62
	LD	C,$4B		; +2/64
				;
; End line 87 (Border 79)	;
; -------------------------------

	OUT	(C),C		; +4

	DI


	LD	E,137
XLp3:

	LD	B,14	; 2
Xlp4:
	DJNZ	Xlp4	; 13*4+3
	NOP		; 1
	NOP		; 1
	NOP		; 1
	DEC	E	; 1
	JR	NZ,Xlp3 ; 3

; *** Poke MREM bit 4 ***
	LD	BC,$7F00 + 10011101b
	OUT	(C),C

	LD	E,25
XLp5:

	LD	B,14	; 2
Xlp6:
	DJNZ	Xlp6	; 13*4+3
	NOP		; 1
	NOP		; 1
	NOP		; 1
	DEC	E	; 1
	JR	NZ,Xlp5 ; 3

	LD	BC,$7F10
	OUT	(C),C
	LD	C,$5D
	OUT	(C),C

	EI
	NOP



	JMP	Loop


; Regular interrupts
;	0 start vsync
;	2 interrupt 1
;	8 start top border (R3H)
;	54 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	106 interrupt 3
;	158 interrupt 4
;	210 interrupt 5
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	262 interrupt 6
;	312=0 start vsync ( (R4+1)*8 )

; Interrupt shift 1
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	242 interrupt request 5
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	249 interrupt acknowledge 3-5
;	294 interrupt 6
;	312=0 start vsync ( (R4+1)*8 )
;	2 vsync interrupt request suppressed, counter == 20

; Interrupt shift 2
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	242 interrupt request 5
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	~284 (275-293) interrupt acknowledge 3-5, counter -= 32
;	312=0 start vsync
;	2 interrupt line 2 allowed, counter == 40

; MRER reset
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	224 MRER bit 4, reset counter
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	249 interrupt acknowledge 3-4
;	276 interrupt 5
;	312=0 start vsync
;	2 interrupt line 2 allowed, counter == 38

; MRER reset + clear request
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	224 MRER bit 4, reset counter, clear request
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	276 interrupt 5
;	312=0 start vsync
;	2 interrupt line 2 allowed, counter == 38

; MRER clear bit 5
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	224 MRER bit 4, counter -= 32
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	249 interrupt acknowledge 3-4
;	274 interrupt 5
;	312=0 start vsync
;	2 interrupt line 2 allowed, counter == 40

; MRER clear bit 5 + clear request
;	0 start vsync
;	2 interrupt request 1
;	8 start top border (R3H)
;	~44 (35-53) interrupt acknowledge 1
;	86 interrupt 2
;	88 start display ( (R4+1-R7)*8 )
;	138 interrupt request 3
;	190 interrupt request 4
;	224 MRER bit 4, counter -= 32, clear request
;	248 start bottom border ( (R4+1-R7+R6)*8 )
;	274 interrupt 5
;	312=0 start vsync
;	2 interrupt line 2 allowed, counter == 40



Interrupt:
	PUSH	BC
	LD	BC,$7F10
	OUT	(C),C
	LD	C,$48
	OUT	(C),C
	LD	B,14
ILoop:
	DJNZ	ILoop
	LD	BC,$7F4F
	OUT	(C),C
	POP	BC
	EI
	RET
